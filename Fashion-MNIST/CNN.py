import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt
import keras
from get_data import *


#CNN using the sequential API
def create_cnn(num_classes):
    model = tf.keras.Sequential()
    #microarchitecture
    model.add(tf.keras.layers.Conv2D(32, (3, 3), (1, 1), padding='same',
    activation='relu', input_shape=(28, 28, 1)))
    model.add(tf.keras.layers.Conv2D(32, (3, 3), padding='same', activation='relu'))
    model.add(tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2,2)))
    model.add(tf.keras.layers.Dropout(0.25))
    #microarchitecture
    model.add(tf.keras.layers.Conv2D(64, (3, 3), padding='same', activation='relu'))
    model.add(tf.keras.layers.Conv2D(64, (3, 3), padding='same', activation='relu'))
    model.add(tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2,2)))
    model.add(tf.keras.layers.Dropout(0.25))
    #bottleneck
    model.add(tf.keras.layers.Flatten())
    model.add(tf.keras.layers.Dense(128, activation='relu'))
    model.add(tf.keras.layers.Dropout(0.5))
    #output layer
    model.add(tf.keras.layers.Dense(num_classes, activation='softmax'))
    #printing a summary of the model structure
    model.summary()
    return model



def compile_and_fit(model, x_train, y_train, x_test, y_test, batch_size, epochs, apply_data_augmentation):
    #sparse_categorical_crossentropy so that we do not need to one hot encode labels
    model.compile(optimizer=tf.keras.optimizers.Adam(0.001),
    loss=tf.keras.losses.sparse_categorical_crossentropy,
    metrics=['accuracy'])

    #fit with/without data augmentation
    if not apply_data_augmentation:
        print('No data augmentation')
        history = model.fit(x_train, y_train,
            batch_size=batch_size,
            epochs=epochs,
            validation_data=(x_test, y_test),
            shuffle=True)
    else:
        print('Using data augmentation')
        #preprocessing and realtime data augmentation with ImageDataGenerator
        datagen = ImageDataGenerator(
            rotation_range = 90, #randomly rotate images in the range (degrees, 0 to 180)
            zoom_range = 0., #set range for random zoom
            horizontal_flip = False, #randomly horizontally flip images
            vertical_flip = True, #randomly vertically flip images
            rescale = None, #rescaling factor (applied before any other transf)
            preprocessing_function = None #function applied on each input
            )
        
    #compute quantities required for feature-wise normalization
    datagen.fit(x_train)
    #fit the model on the batches generated by datagen.flow()
    history = model.fit_generator(datagen.flow(x_train, y_train, batch_size = batch_size),
    epochs = epochs,
    validation_data = (x_test, y_test),
    workers = 1)
    return model, history 



num_classes = 10
batch_size = 128
epochs = 10
apply_data_augmentation = False
num_predictions = 20
#load data
x_train, y_train, x_test, y_test, classes = prepare_data()
#create the model
cnn_model = create_cnn(num_classes)
#compile and fit model
cnn_model, history = compile_and_fit(cnn_model, x_train, y_train, x_test, y_test,
 batch_size, epochs, apply_data_augmentation)
#Evaluate trained model
score = cnn_model.evaluate(x_test, y_test)
print('Evaluation Loss:', score[0])
print('Evaluation Accuracy:', score[1])



#Vizualizing Learning Curves
def plot_learning_curves(history, epochs):
    #accuracies and losses
    acc = history.history['accuracy']
    val_acc = history.history['val_accuracy']
    loss = history.history['loss']
    val_loss = history.history['val_loss']
    epochs_range = range(epochs)
    #creating figure
    plt.figure(figsize=(8, 8))
    plt.subplot(1, 2, 1)
    plt.plot(epochs_range, acc, label='Training Accuracy')
    plt.plot(epochs_range, val_acc, label='Validation Accuracy')
    plt.legend(loc='lower right')
    plt.title('Training/Validation Accuracy')
    plt.subplot(1, 2, 2)
    plt.plot(epochs_range, loss, label='Training Loss')
    plt.plot(epochs_range, val_loss, label='Validation Loss')
    plt.legend(loc='upper right')
    plt.title('Training/Validation Loss')
    plt.show()

#plot learning curves
plot_learning_curves(history, epochs)
